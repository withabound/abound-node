/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AboundApi from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace DropInUiComponentAccessTokens {
    interface Options {
        environment?: core.Supplier<environments.AboundApiEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class DropInUiComponentAccessTokens {
    constructor(protected readonly _options: DropInUiComponentAccessTokens.Options) {}

    /**
     * Creates an access token for authenticating Drop-In UI Components.
     *
     * @param {AboundApi.AccessTokenRequestSchema} request
     * @param {DropInUiComponentAccessTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AboundApi.BadRequestError}
     * @throws {@link AboundApi.UnauthorizedError}
     * @throws {@link AboundApi.NotFoundError}
     * @throws {@link AboundApi.InternalServerError}
     *
     * @example
     *     await client.dropInUiComponentAccessTokens.createAccessToken({
     *         "Idempotency-Key": "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08",
     *         expiresIn: 300
     *     })
     */
    public async createAccessToken(
        request: AboundApi.AccessTokenRequestSchema,
        requestOptions?: DropInUiComponentAccessTokens.RequestOptions
    ): Promise<AboundApi.AccessTokenSchema> {
        const { "Idempotency-Key": idempotencyKey, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.AboundApiEnvironment.Production,
                "access-tokens"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "abound",
                "X-Fern-SDK-Version": "0.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "Idempotency-Key": idempotencyKey != null ? idempotencyKey : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as AboundApi.AccessTokenSchema;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new AboundApi.BadRequestError(_response.error.body as AboundApi.ErrorBadRequestSchema);
                case 401:
                    throw new AboundApi.UnauthorizedError(_response.error.body as AboundApi.ErrorSchema);
                case 404:
                    throw new AboundApi.NotFoundError(_response.error.body as AboundApi.ErrorSchema);
                case 500:
                    throw new AboundApi.InternalServerError(_response.error.body as AboundApi.ErrorSchema);
                default:
                    throw new errors.AboundApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AboundApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AboundApiTimeoutError();
            case "unknown":
                throw new errors.AboundApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
