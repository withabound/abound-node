/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Abound from "../../src/api/index";
import { AboundClient } from "../../src/Client";

const client = new AboundClient({
    environment: process.env.TESTS_BASE_URL || "test",
    token: process.env.TESTS_AUTH || "test",
});

describe("FormW9", () => {
    test("list", async () => {
        const response = await client.formW9.list();
        expect(response).toEqual([]);
    });

    test("create", async () => {
        const response = await client.formW9.create({
            "Idempotency-Key": "string",
            payee: {
                name: "string",
                name2: "string",
                tin: "string",
                address: "string",
                address2: "string",
                city: "string",
                state: "string",
                postalCode: "string",
                country: "string",
            },
            payer: {
                name: "string",
                name2: "string",
                tin: "string",
                phoneNumber: "string",
                address: "string",
                address2: "string",
                city: "string",
                state: "string",
                postalCode: "string",
                country: "string",
            },
            formFields: {
                taxClassification: Abound.W9FormFieldsSchemaFormFieldsTaxClassification.Individual,
                otherTaxClassification: "string",
                hasIndirectForeignOwnership: true,
                exemptPayeeCode: Abound.W9FormFieldsSchemaFormFieldsExemptPayeeCode.One,
                exemptFatcaCode: Abound.W9FormFieldsSchemaFormFieldsExemptFatcaCode.A,
                accountNumbers: ["string"],
                isSubjectToBackupWithholding: true,
                certifiedAt: new Date("2024-01-15T09:30:00.000Z"),
                electronicSignature: {
                    signature: "string",
                    printedName: "string",
                    signedAt: new Date("2024-01-15T09:30:00.000Z"),
                    ipAddress: "string",
                },
            },
            userId: "string",
        });
        expect(response).toEqual({ key: "value" });
    });

    test("retrieve", async () => {
        const response = await client.formW9.retrieve("string");
        expect(response).toEqual({ key: "value" });
    });
});
